#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# Workdir defined at Dockerfile
readonly WORKDIR="/var/www/html"
# Application service at docker-compose.yml
readonly DOCKER_SERVICE_NAME="app"
# Container name for app service at docker-compose.yml
readonly DOCKER_SERVICE_CONTAINER_NAME="laravel_scaffold"

function configure_xdebug() {
    if [[ "$(uname -s)" == "Linux" ]]; then
        if [[ "$(< /proc/version)" == *@(microsoft)* ]]; then
            # If it's running in WSL
            readonly XDEBUG_HOST=$(grep nameserver /etc/resolv.conf | cut -d ' ' -f2)
        else
            # If it's running in Linux
            readonly XDEBUG_HOST=$(hostname -I | td -d ' ')
        fi
    elif [[ "$(uname -s)" == "Darwin" ]]; then
        # If it's running in macOS
        readonly XDEBUG_HOST=$(ipconfig getifaddr en1)
    fi

    # Adding your current IP to 'xdebug.remote_host=' at xdebug.ini
    sed -i "s/xdebug\.remote_host\=.*/xdebug\.remote_host\=$XDEBUG_HOST/g" .docker/xdebug.ini
}

function helper_commands() {
    if [[ "$1" =~ ^"artisan"* ]]; then
        # Run an artisan command inside the app container.
        docker-compose exec $DOCKER_SERVICE_NAME sh -c "cd $WORKDIR && php $*" && exit 0
    elif [[ "$1" =~ ^"phpunit"* ]]; then
        # Run an phpunit command inside the app container.
        docker-compose exec $DOCKER_SERVICE_NAME sh -c "cd $WORKDIR && ./vendor/bin/$*" && exit 0
    elif [[ "$1" =~ ^"composer"* ]]; then
        # Run an composer command inside the app container.
        docker-compose exec $DOCKER_SERVICE_NAME sh -c "cd $WORKDIR && $*" && exit 0
    fi
}

function docker_commands() {
    if [[ "$1" =~ ^"up"* ]]; then
        docker-compose up
    elif [[ "$1" =~ ^"down"* ]]; then
        docker-compose down --remove-orphans
    elif [[ "$1" =~ ^"access"* ]]; then
        docker exec -it $DOCKER_SERVICE_CONTAINER_NAME /bin/bash
    elif [[ "$1" =~ ^"docker"* ]]; then
        # Run Docker command through this script.
        "$@"
    elif [[ "$1" == "clean-all" ]]; then
        printf "INFO: Destroying docker-compose resources \n"
        docker-compose down --remove-orphans

        printf "\nINFO: Killing any remaining containers \n"
        docker kill "$(docker ps -a -q)" || true

        printf "\nINFO: Prunning system and volumes \n"
        docker system prune -a --force && docker volume prune --force

        printf "\nINFO: Listing running containers \n"
        docker ps -a

        printf "\nINFO: Listing existing volumes \n"
        docker volume ls
    elif [[ "$1" =~ ^"docker-compose"* ]]; then
        # Run docker-compose command through this script.
        "$@"
    else
        # Run an arbitrary command inside the app container.
        docker-compose exec $DOCKER_SERVICE_NAME sh -c "$*"
    fi
}

function main() {
    configure_xdebug
    helper_commands "$@"
    docker_commands "$@"
}

main "$@"
